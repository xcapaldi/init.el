#+TITLE: 0 to LSP: Emacs init.el From Scratch
#+AUTHOR: Xavier Capaldi
#+PROPERTY: header-args  :tangle "init.el"

* Inspiration
[[https://github.com/ThePrimeagen][ThePrimeagen]] created a [[https://www.youtube.com/watch?v=w7i4amO_zaE][YouTube video]] detailing his process of going from a vanilla NeoVim install to a fully configured minimal editor with LSP.
The video seems popular and since its release I've seen several others in a similar vein.
However all the videos are targetted at Vim or NeoVim.
I wanted to create a similar guide for new Emacs users.
I think Emacs is a wonderful editor but it is so extensible that one user's config may be unreadable to another.
The goal of this repository is to create a basic configuration guide that somewhat mimics the basic functionality in ThePrimeagen's video or in Visual Studio Code.
If you're curious, why emacs, I recommend the [[https://github.com/remacs/remacs#why-emacs][remacs readme]] which explains it quite well.
For me, the killer feature of Emacs is not a particular package (org-mode, magit) but rather the fact that the entire system is hackable.
You, as the user, feel empowered to modify the system to your needs.
I hope to show that you can replicate basic features of a modern editor with a minimal configuration.
The small time spent configuring Emacs will pay off in the long run; the editor has already survived nearly 40 years!

* Why version 29
This guide was written using and for Emacs v29.1.
It will probably work well with any version >v29.
v29 introduced [[https://github.com/joaotavora/eglot][eglot]] as its native LSP client; making it the first version for which I could write this guide without using external libraries.

* Why not a literate config
If you already know Emacs, you may wonder why I don't suggest a literate configuration using org-mode.
In fact this document could be used as a literate configuration with very little modification.
The main reason I don't suggest this is that it is another layer of complexity for a new user.
Already learning the basics of Emacs and elisp is enough without adding org-mode or the tangling logic.
You can always add it later.

* Pure vanilla vs. with packages
This guide is split into two but described in one cohesive narrative.
The first part of the guide uses *only* pure vanilla Emacs.
No external packages are installed.
This version of the config is tangled into =vanilla-init.el=.
While is it functional, I don't think this configuration can compete with the user experience of Visual Studio Code.
For that reason, in the second part of guide, we go back and amend the configuration using external packages to improve the experience greatly.
That config is tangled to =init.el=.
If you want a super minimalistic system that runs on Linux, you could try the =vanilla-init.el=.
However if you want something more modern and functional (or you use MacOS) I strongly recommend the =init.el=.
=vanilla-init.el= is less than 100 loc and =init.el= is less than 200 loc.
In either case, it's not too bad for such a complex and capable editor.

* Read the manual
This guide doesn't go into a lot of detail as to how much Emacs or these packages can be configured.
Nor does it give a tutorial on the basic usage of Emacs itself.
I have included links to the relevant resource for every package.
Feel free to use the config as is, but I do recommend reading the documentation.
Emacs doesn't hold your hand but the documentation is readily available in the editor itself.

* Alternative motion schemes
If you're trying Emacs after working in a vim-like editor, you may be tempted to use [[https://github.com/emacs-evil/evil][evil]] which is a vim emulation package in Emacs.
It's an excellent emulation but requires a lot of modification to make it work nicely with Emacs' countless modes.
Instead I suggest you try vanilla Emacs at first.
If you're really set on a modal editing environment, look at [[https://github.com/meow-edit/meow][meow]] which is a selection-based modal editing mode inspired by [[https://kakoune.org/][kakaoune]].
It works nicely with the Emacs built-ins.

* Configuration location
The Emacs configuration should be stored in your XDG-compatible config directory: =~/.config/emacs/=.
Alternatively you can use =~/.emacs.d/= or any of [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html][several other locations]].
The location on Windows can be determined by [[https://www.gnu.org/software/emacs/manual/html_node/efaq-w32/Location-of-init-file.html#Location-of-init-file][following this FAQ]].
You just need an =init.el= as your main configuration.
You could split your configuration into many files and ~require~ them in your central config but at this point, you don't need that complexity.
The whole configuration detailed here is less than 150 lines.
Note that you should follow the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Conventions.html][keybinding conventions]] when adding your own keybindings to this configuration.

* The vanilla experience
** Package configuration manager
Emacs comes with [[https://github.com/jwiegley/use-package][use-package]] which is an excellent package configuration manager.
It allows you to modularize your configuration by package; controlling when packages, keybindings and settings are loaded.
It does all this without requiring you to have extensive elisp knowledge.
First we need to load the package manually:

#+BEGIN_SRC emacs-lisp
(require 'use-package)
#+END_SRC

** General settings
Emacs default settings are ... old.
We can apply some general settings that will make your initial experience more modern.
Note that for most of these we could configure them inside a =use-package= block scoped to the native package.
However for many of these, that would be the only setting we apply, so it seems unnecessarily verbose.
For example if we want Emacs to respect the system clipboard for purposes of cutting and pasting we could configure it like this:

#+BEGIN_SRC emacs-lisp :tangle no
(use-package select
  :ensure nil
  :custom (select-enable-clipboard t))
#+END_SRC

Or we can apply a bunch of these small settings in a generic =emacs= block
using one line per setting:

#+BEGIN_SRC emacs-lisp :tangle vanilla-init.el :noweb yes
(use-package emacs
  :config
  <<SET_DEFAULTS>>
  <<SET_GLOBAL_MODES>>
  <<LOAD_THEME>>
  <<SET_FONT>>
  <<REBIND_KEYS>>
  <<BACKUPS_AND_AUTOSAVES>>)
#+END_SRC

Here are a bunch of good defaults to put in that =config= block:

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref SET_DEFAULTS
(setq-default
 coding-system-for-read 'utf-8     ; Use UTF-8 by default
 coding-system-for-write 'utf-8
 cursor-in-non-selected-windows t  ; Don't hide the cursor in inactive windows
 help-window-select t              ; Focus new help windows when opened
 indent-tabs-mode nil              ; Use spaces by default instead of tabs
 tab-width 4                       ; Set width for tabs
 indicate-empty-lines t            ; Display bitmap in left fringe on empty lines
 indicate-buffer-boundaries 'left  ; Indicate last newline in buffer
 require-final-newline t           ; Always insert final newline on save
 show-trailing-whitespace t        ; Highlight trailing whitespace at end of line
 inhibit-startup-screen t          ; Remove default start screen
 select-enable-clipboard t         ; Merge Emacs and system clipboard
 view-read-only t                  ; Always open read-only buffers in view-mode
 visible-bell t                    ; Use a visual bell
 vc-follow-symlinks t              ; Don't ask for confirmation following symlinked files
 sentence-end-double-space nil     ; Sentences end with punctuation and a single space
 show-paren-delay 0)               ; No delay on highlighting matching paren
(fset 'yes-or-no-p 'y-or-n-p)  ; Replace yes/no prompts with y/n
#+END_SRC

We should also enable/disable some of the global modes.
You'll notice I leave =tool-bar-mode= and =menu-bar-mode= enabled; two modes which people often recommend disabling for a cleaner interface.
However if you're just starting out in Emacs, I don't think there is anything wrong with using these menus.
You can easily adjust these settings as you see fit.

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref SET_GLOBAL_MODES
(column-number-mode 1)                   ; Show the column number in modeline
(tool-bar-mode 1)                        ; Show the toolbar
(menu-bar-mode 1)                        ; Show the menubar
(context-menu-mode 1)                    ; Replace standard mouse-3 actions with context menu
(global-auto-revert-mode 1)              ; If file changes on disk, update the buffer automatically
(pixel-scroll-precision-mode 1)          ; Smooth scrolling
(set-scroll-bar-mode 'right)             ; Show the scrollbar and display on the right side
(display-fill-column-indicator-mode -1)  ; Don't display indicator for the fill line
(global-hl-line-mode -1)                 ; Don't highlight current line globally
(show-paren-mode 1)                      ; Show matching parens
(blink-cursor-mode 1)                    ; Blink the cursor
(tooltip-mode -1)                        ; Hide mouse hover tooltips
(global-visual-line-mode -1)             ; Wrap lines instead of extending past view
(auto-fill-mode -1)                      ; Don't auto-wrap lines
#+END_SRC

** themes
Emacs comes with several decent themes.
You can see the options by running =M-x load-theme= and then pressing =TAB=.
You will be able to see and select from the preloaded themes.
Once you've found one you like, you can add the load command to the config block.
I am partial to the native [[https://protesilaos.com/emacs/modus-themes][modus themes]].
They are accessible themes that are quite easy on the eye.
You can set the default theme to the light theme:

#+BEGIN_SRC emacs-lisp :tangle no
(load-theme 'modus-operandi t)
#+END_SRC

Or to the dark theme:

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref LOAD_THEME
(load-theme 'modus-vivendi t)
#+END_SRC

In either case there is a utility command, ~modus-themes-toggle~ which you can invoke to switch back and forth between light and dark mode.

** fonts
We can also configure the default font and line spacing:

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref SET_FONT
;; only enable font if available on system
(when (member "Unifont" (font-family-list))
  (set-frame-font "Unifont-12:regular" nil t)
  (add-to-list 'initial-frame-alist '(font . "Unifont-12:regular"))
  (add-to-list 'default-frame-alist '(font . "Unifont-12:regular")))
;; set fallback fonts for symbols and emoji
(set-fontset-font t 'symbol (font-spec :family "Apple Symbols") nil 'prepend)
(set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji") nil 'prepend)
;; set line spacing (0.1 == 1x)
(setq-default line-spacing 0.1)
#+END_SRC

** rebind keys on MacOS
Finally if we are using MacOS, you may want to explicitly map the MacOS modifiers to Emacs' =meta= (Alt) and =super= (Win) keys.

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref REBIND_KEYS
(when (equal system-type 'darwin)
  (setq mac-command-modifier 'meta)
  (setq mac-option-modifier 'super))
#+END_SRC

** backups and autosaves
Emacs's native behavior with backups, autosaves and lockfiles is quite annoying and will pollute your working directories.
Instead we can create temp directories to stores all backups and autosaves.
In addition, when editing a file in emacs, it will create a lockfile to block operating on the same file from another emacs instance.
I don't think this is a major problem since we've enabled updating the buffer if the file changes on disk.
I think is is also quite rare that you have multiple instances of Emacs open; yet alone working on the same file.

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref BACKUPS_AND_AUTOSAVES
;; write auto-saves and backups to separate directory
(make-directory "~/.tmp/emacs/auto-save/" t)
(make-directory "~/.tmp/emacs/backup/" t)
(setq auto-save-file-name-transforms '((".*" "~/.tmp/emacs/auto-save/" t)))
(setq backup-directory-alist '(("." . "~/.tmp/emacs/backup/")))

;; do not move the current file while creating backup
(setq backup-by-copying t)

;; disable lockfiles
(setq create-lockfiles nil)
#+END_SRC

** dired
Dired is Emacs' native file manager.
It is very powerful but we can slightly improve on the default interface by changing the listing format and enabling a command.
The listing flags are the same passed to =ls=.

The default navigation into subdirectories opens them in a new buffer.
If you navigate a lot, you can have a huge number of Dired buffers.
Instead we can enable ~dired-find-alternate-file~ which will allow you to press =a= in a dired buffer to open the subdirectory in your current buffer.
This is much more intuitive for users of modern file managers.

#+BEGIN_SRC emacs-lisp :tangle vanilla-init.el
(use-package dired
  :ensure nil
  :custom ((dired-listing-switches "-alh"))
  :config (put 'dired-find-alternate-file 'disabled nil))
#+END_SRC

** display-line-numbers
Some people may choose to eschew line numbers and just jump to particular lines with =M-g M-g=.
However if you like line numbers, you should include the following block to enable them in all =prog-mode= (and sub-mode) buffers:

#+BEGIN_SRC emacs-lisp :tangle vanilla-init.el
(use-package display-line-numbers
  :ensure nil
  :hook (prog-mode . display-line-numbers-mode))
#+END_SRC

** eglot
[[https://github.com/joaotavora/eglot][Eglot]] is the native [[https://microsoft.github.io/language-server-protocol/][LSP]] for Emacs v29.
Technically we don't need a configuration block for it but you could add hooks to be sure it runs in certain modes.
Alternatively you can start it up in any buffer with =M-x eglot=.

#+BEGIN_SRC emacs-lisp :tangle vanilla-init.el
(use-package eglot
  :ensure nil)
  ;;:hook (python-mode
  ;;       c-mode))
#+END_SRC

Note that =eglot= takes over built-in emacs commands.
For example when =eglot= is active it will use the built-in ~xref-find-definitions~ (=M-.=) and ~xref-find-references~ (=M-?=).
=eglot= add a few commands specific to LSP that you may want to bind for quick access:

#+BEGIN_SRC emacs-lisp :tangle no
  :bind (:map eglot-mode-map
	 ([remap display-local-help] . eldoc-doc-buffer)
	 ("C-c r" . eglot-rename)
	 ("C-c o" . eglot-code-action-organize-imports)
	 ("C-c f" . eglot-format)
	 ("C-c h" . eldoc))
#+END_SRC

If you want =eglot= to format your buffer on save, check out [[https://gist.github.com/carlosrogue/777f43b4a46400cae21aaf9ba5ca5ccc#file-gopls-eglot-el-L22][this suggestion]] by carlosrogue.
You can put the following (with hooks for the modes you want enabled) into your ~:config~ section:

#+BEGIN_SRC emacs-lisp :tangle no
  (defun eglot-format-buffer-on-save ()
    (add-hook 'before-save-hook #'eglot-format-buffer -10 t))
  (add-hook 'go-mode-hook #'eglot-format-buffer-on-save)
#+END_SRC

There are other formatters which have been nicely compared [[https://docs.google.com/document/d/1bIURUdHqlkF8QfFDnOP4ZOHXADkEtB_mbzMVoBQEBSw/edit][here]] however for most use-cases, I think you can rely on ~eglot-format-buffer~.

** flymake
Flymake is responsible for displaying warnings and errors.
You can read the [[https://www.gnu.org/software/emacs/manual/html_node/flymake/index.html#Top][docs]] but basically you can see project errors with =flymake-show-project-diagnostics= and jump between errors with =flymake-goto-prev-error= and =flymake-goto-next-error=.
These aren't bound to anything by default so you should bind them if you use them often.
Note that Flymake is run automatically by =eglot= and configured with the LSP server as the backend.
If you want to use Flymake without LSP, you'll need to look more into the docs on how to configure it for your use.

** hippie-exp
In terms of programming there are two types of completion you will likely use.
The first is completions supplied via LSP.
This can be invoked with =C-M-i=.
Alternatively if you want to use =TAB=, you could set =(setq-default tab-always-indent 'complete)= in your general config block.

For non-LSP expansion, we can use [[https://www.masteringemacs.org/article/text-expansion-hippie-expand][hippie-expand]] and replace the keymap for =dabbrev-expand= with it.
=hippie-expand= cycles through a set of possible completion functions (which can be configured of course).

#+BEGIN_SRC emacs-lisp :tangle vanilla-init.el
(use-package hippie-exp
  :ensure nil
  :bind ([remap dabbrev-expand] . hippie-expand)) ;; M-/ and C-M-/
#+END_SRC

** ibuffer
=ibuffer= is a nice replacement for the default =buffer-menu=.
We can use the =use-package= =bind= and =remap= interfaces to replace the keybinding for =buffer-menu= with =ibuffer=.

#+BEGIN_SRC emacs-lisp :tangle vanilla-init.el
(use-package ibuffer
  :ensure nil
  :bind ([remap list-buffers] . ibuffer)) ;; C-x C-b
#+END_SRC

** icomplete
Emacs has a couple completion systems.
In vanilla Emacs, =icomplete= or =icomplete-vertical= are the most sophisticated.
We can also use the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Completion-Styles.html#index-flex_002c-completion-style][flex]] completion style by default.

#+BEGIN_SRC emacs-lisp :tangle vanilla-init.el
(use-package icomplete
  :ensure nil
  ;; M-TAB is the normal keybind but often conflicts with window managers
  :bind (:map icomplete-minibuffer-map
			  ("M-j" . icomplete-force-complete))
  :init
  (icomplete-mode) ;; or icomplete-vertical-mode
  :custom
  (completion-styles '(flex basic)))
#+END_SRC

You may want to read the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Icomplete.html][docs]] on icomplete since its interface is not very modern.
The crucial commands are:

- =C-j= will select the "top" completion in the list
- =M-j= selects the "top" completion but leave it in the minibuffer; helpful for navigating file tree
- =C-,= and =C-.= can be used to rotate the list of completions
- =C-g= will cancel and exit the minibuffer (as always in Emacs)
- =TAB= will try to complete and then open the =Completions= buffer

The =Completions= buffer can be interacted with by clicking or via a set of [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Completion-Commands.html][keybindings]]:

- =M-UP= and =M-DOWN= allow cycling through the =Completions= buffer while still in the minibuffer.
- =M-v= switches you from the minibuffer to the =Completions= buffer
- =q= brings you back to the minibuffer
- =TAB=/=RIGHT=/=n= and =S-TAB=/=LEFT=/=p= allow you to navigate the =Completions= buffer
- =RET= selects the current candidate

** project
Emacs has it's own way of interacting with VCS-managed projects.
You can read the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Projects.html][docs]] here but in summary there are many commands that can be run scoped to a given project with the =C-x p= prefix.
For example =C-x C-f= finds a file to open globally.
=C-x p f= finds a file in the current project.

** subword
In programming modes, we want to navigate by subword (useful in camel-case languages):

#+BEGIN_SRC emacs-lisp :tangle vanilla-init.el
(use-package subword
  :ensure nil
  :hook prog-mode)
#+END_SRC

** workflow
With that we have a very basic configuration that is somewhat modernized without any external packages.
However you will quickly see some friction tworking with this setup on a big project where you're used to the usual amenities of a modern editor.
For example, we open our large x-lang project and start to get to work fixing a bug.
We start =eglot= to interface with our LSP server.
We identify a function call that is suspect and jump to its definition with =M-.=.
We see it calls a standard library function and we can see =eldoc= prints part of its docstring in the minibuffer.
We can see the full docstring with =M-x eldoc=.
As we suspected this function was supposed to be replaced with our own implemention.
You start typing =mylib.Repla= and then press =C-M-i= to invoke completion (or =TAB= if you configured it that way).
It opens a list of options provided by the LSP at that moment in the minibuffer with =icomplete=.
You then need to pick from that list.
Further typing is not sent back to the LSP server so this completion list isn't updated till you've selected one or canceled.
This is probably the most jarring difference working with purely vanilla Emacs.

* The with-packages experience
If we relax our "no external packages" policy, we can get a much more modern UX.
We will do this incrementally so that you could chose to stop when the setup matches your needs.

** Package manager
=package.el= is the native package manager.
Since we'll be using it to install packages, we need to load and configure it first:

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))

(package-initialize)
#+END_SRC

[[https://elpa.gnu.org/][ELPA]] is the official package repository but we add [[https://melpa.org/][MELPA]] as well.

Unfortunately =package.el= has a few annoying features.
First it is not declarative, so your configuration doesn't guarantee the state.
Second, it modifies your =init.el=.
After running your configuration for the first time, you'll see something like this:

#+BEGIN_SRC emacs-lisp :tangle no
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(minions magit corfu embark-consult embark orderless consult marginalia vertico exec-path-from-shell)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
#+END_SRC

As the comments state, you should not modify it.
However this is very annoying if you have your config under version control.
Instead we can tell Emacs to use a separate file for customizations:

#+BEGIN_SRC emacs-lisp
(setq custom-file (concat user-emacs-directory "custom.el"))
#+END_SRC

We'll want to load that customization file at the end of this configuration.

** Package configuration manager
We still use [[https://github.com/jwiegley/use-package][use-package]] which can also integrate with =package.el= to trigger installation of packages.
=package.el= supports installing packages from a version-controlled source.
Integration of this feature with =use-package= was merged into Emacs proper but missed the Emacs 29 release deadline.
So we install our first external package which adds support to =use-package= to manage packages in version control and not the package repositories.

#+BEGIN_SRC emacs-lisp
(require 'use-package)

(unless (package-installed-p 'vc-use-package)
  (package-vc-install "https://github.com/slotThe/vc-use-package"))
#+END_SRC

While this config doesn't actually use this feature, it is very likely you'll need to install a package like this.
For example, this is a simple configuration to install Github's [[https://github.com/features/copilot][Copilot]] plugin:

#+BEGIN_SRC emacs-lisp :tangle no
(use-package copilot
  :vc (:fetcher github :repo zerolfx/copilot.el)
  :if (eq system-type 'darwin)
  :hook (prog-mode . copilot-mode)
  :bind (:map copilot-mode-map
              ("S-<tab>" . copilot-accept-completion)
              ("S-<SPC>" . copilot-accept-completion-by-word)))
#+END_SRC

** no-littering
Emacs has a tendency to clutter the config directory.
This package tries to automagically keep things clean.
In addition, this package can handle storing backups and autosaves in a centralized directory without our manual configuration.
It should be initialized as early as possible in the configuration.

#+BEGIN_SRC emacs-lisp
(use-package no-littering
  :ensure t
  :config (no-littering-theme-backups))
#+END_SRC

** General settings
We can keep the general settings we defined previously:

#+BEGIN_SRC emacs-lisp
(use-package emacs
  :config
  (setq-default
   coding-system-for-read 'utf-8     ; Use UTF-8 by default
   coding-system-for-write 'utf-8
   cursor-in-non-selected-windows t  ; Don't hide the cursor in inactive windows
   help-window-select t              ; Focus new help windows when opened
   indent-tabs-mode -1               ; Use spaces by default instead of tabs
   tab-width 4                       ; Set width for tabs
   indicate-empty-lines t            ; Display bitmap in left fringe on empty lines
   indicate-buffer-boundaries 'left  ; Indicate last newline in buffer
   require-final-newline t           ; Always insert final newline on save
   show-trailing-whitespace t        ; Highlight trailing whitespace at end of line
   inhibit-startup-screen t          ; Remove default start screen
   select-enable-clipboard t         ; Merge Emacs and system clipboard
   view-read-only t                  ; Always open read-only buffers in view-mode
   visible-bell t                    ; Use a visual bell
   vc-follow-symlinks t              ; Don't ask for confirmation following symlinked files
   sentence-end-double-space nil     ; Sentences end with punctuation and a single space
   show-paren-delay 0)               ; No delay on highlighting matching paren

  (fset 'yes-or-no-p 'y-or-n-p)  ; Replace yes/no prompts with y/n

  ;; global modes
  (column-number-mode 1)                   ; Show the column number in modeline
  (tool-bar-mode 1)                        ; Show the toolbar
  (menu-bar-mode 1)                        ; Show the menubar
  (context-menu-mode 1)                    ; Replace standard mouse-3 actions with context menu
  (global-auto-revert-mode 1)              ; If file changes on disk, update the buffer automatically
  (pixel-scroll-precision-mode 1)          ; Smooth scrolling
  (set-scroll-bar-mode 'right)             ; Show the scrollbar and display on the right side
  (display-fill-column-indicator-mode -1)  ; Don't display indicator for the fill line
  (global-hl-line-mode -1)                 ; Don't highlight current line globally
  (show-paren-mode 1)                      ; Show matching parens
  (blink-cursor-mode 1)                    ; Blink the cursor
  (tooltip-mode -1)                        ; Hide mouse hover tooltips
  (global-visual-line-mode -1)             ; Wrap lines instead of extending past view
  (auto-fill-mode -1)                      ; Don't auto-wrap lines

  ;; load theme
  (load-theme 'modus-vivendi t)

  ;; only enable font if available on system
  (when (member "Unifont" (font-family-list))
    (set-frame-font "Unifont-12:regular" nil t)
    (add-to-list 'initial-frame-alist '(font . "Unifont-12:regular"))
    (add-to-list 'default-frame-alist '(font . "Unifont-12:regular")))
  ;; set fallback fonts for symbols and emoji
  (set-fontset-font t 'symbol (font-spec :family "Apple Symbols") nil 'prepend)
  (set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji") nil 'prepend)
  ;; set line spacing (0.1 == 1x)
  (setq-default line-spacing 0.1)

  ;; rebind keys on MacOS
  (when (equal system-type 'darwin)
  (setq mac-command-modifier 'meta)
  (setq mac-option-modifier 'super))

    ;; disable lockfiles
  (setq create-lockfiles nil))
#+END_SRC

** corfu
[[https://github.com/minad/corfu]]

This package provides a completion popup which integrates with LSP and emacs' built-in completion interfaces.
It doesn't require any special configuration (although there are many options available).
This solves the main workflow issue mentioned above in the vanilla configuration.

#+BEGIN_SRC emacs-lisp
(use-package corfu
  :ensure t
  :init
  (global-corfu-mode))
#+END_SRC

*** kind-icon
[[https://github.com/jdtsmith/kind-icon]]

If you want to add icons to =corfu=, you could install and setup =kind-icon= for this:

#+BEGIN_SRC emacs-lisp :tangle no
(use-package kind-icon
  :ensure t
  :after corfu
  :custom
  (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+END_SRC

** dired
#+BEGIN_SRC emacs-lisp
(use-package dired
  :ensure nil
  :custom ((dired-listing-switches "-alh"))
  :config (put 'dired-find-alternate-file 'disabled nil))
#+END_SRC

** display-line-numbers
#+BEGIN_SRC emacs-lisp
(use-package display-line-numbers
  :ensure nil
  :hook (prog-mode . display-line-numbers-mode))
#+END_SRC

** dumb jump
This package uses =grep=, =The Silver Searcher= or =ripgrep= along with some baked language heuristics to implement a fast go-to-definiton command.
LSP should usually handle this functionality but =dumb-jump= is a solid fallback that just works without configuration.

#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :ensure t
  :after xref
  :custom (dumb-jump-force-searcher 'rg)
  :config (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))
#+END_SRC

** eglot
#+BEGIN_SRC emacs-lisp
(use-package eglot
  :ensure nil)
  ;;:hook (python-mode
  ;;       c-mode))
#+END_SRC

** exec-path-from-shell
[[https://github.com/purcell/exec-path-from-shell]]

This package ensures the shell environment variables are also present in Emacs.
This is often an issue on MacOS and can be quite frustrating for a new user.

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :init
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))
#+END_SRC

** flymake

** hippie-exp
#+BEGIN_SRC emacs-lisp
(use-package hippie-exp
  :ensure nil
  :bind ([remap dabbrev-expand] . hippie-expand)) ;; M-/ and C-M-/
#+END_SRC

** ibuffer
#+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :ensure nil
  :bind ([remap list-buffers] . ibuffer)) ;; C-x C-b
#+END_SRC

** magit
[[https://magit.vc/]]

Emacs already has several features built-in for version control.
If you're using git most of the time, consider using =magit= which a very powerful git porcelain.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t)
#+END_SRC

** minions
[[https://github.com/tarsius/minions]]

You may have noticed that the mode line can become very cluttered as various modes and minor modes compete for space.
Most of the time, you don't care for a particular minor mode indicator.
There are a several packages that allow you configure how modes are displayed or hidden:

- [[https://github.com/myrjola/diminish.el][diminish.el]]
- [[https://elpa.gnu.org/packages/delight.html][delight.el]]
- [[https://github.com/alezost/dim.el][dim.el]]
- [[https://github.com/radian-software/blackout][blackout.el]]

These all require you to configure the display for each package.
=minions.el= is much simpler to configure.
It assumes by default that you do **not** want to see minor modes and hides them in a =;-)= menu.
You can define modes that you want to be excluded from that blanket assumption.

#+BEGIN_SRC emacs-lisp
(use-package minions
  :ensure t
  :init
  (minions-mode 1)
  :custom
  (minions-prominent-modes '(flymake-mode)))
#+END_SRC

=flymake-mode= is a example of a minor mode that display helpful information in the mode line.
It shows the number of errors and warnings in the buffer.
We can just add it as a member of the ~minions-prominent-modes~ so it is always displayed when active.

** project

** subword
#+BEGIN_SRC emacs-lisp
(use-package subword
  :ensure nil
  :hook prog-mode)
#+END_SRC

** vundo
[[https://github.com/casouri/vundo]]

Emacs has a powerful [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Undo.html][undo system]] but it can be very hard to keep track of the undo state.
=vundo.el= solves this by providing a visual interface to the built-in undo system.

#+BEGIN_SRC emacs-lisp
(use-package vundo
  :ensure t
  :bind ("C-c u" . vundo))
#+END_SRC

** Browse remote code
It can be helpful to jump directly to hosted remote code from your local
checkout.

#+BEGIN_SRC emacs-lisp
(use-package browse-at-remote
  :ensure t
  :bind ("C-c g g" . browse-at-remote))
#+END_SRC

#+RESULTS:
: browse-at-remote

** Improved completions
We can install a family of packages that will greatly modernize completions over =icomplete= et al.

*** vertico
[[https://github.com/minad/vertico]]

=vertico.el= is faithful to basic emacs behavior but has a nicer interface.
In particular (as the name suggests), it displays options vertically as opposed to most of emacs' built-ins which display them horizontally.
Several competant Emacs users still rely on =icomplete= but I am more productive with =vertico= and I suspect most users new to Emacs will be as well.

#+BEGIN_SRC emacs-lisp
(use-package vertico
  :ensure t
  :init
  (vertico-mode))
#+END_SRC

*** marginalia
[[https://github.com/emacs-straight/marginalia]]

=marginalia.el= adds additional information adjacent to minibuffer completions.

#+BEGIN_SRC emacs-lisp
(use-package marginalia
  :ensure t
  :bind (:map minibuffer-local-map
              ("M-A" . marginalia-cycle))
  :init
  (marginalia-mode))
#+END_SRC

*** consult
[[https://github.com/minad/consult]]

=consult.el= provides many helpful commands to replace the built-ins.
In addition it has some new commands as well.
The example =consult= configuration in their documentation is quite large but I've distilled it down to something smaller for this configuration.
As you gain experience you can add more functionality to suit your needs.

#+BEGIN_SRC emacs-lisp
(use-package consult
  :ensure t
  :bind (([remap switch-to-buffer] . consult-buffer)
         ([remap switch-to-buffer-other-window] . consult-buffer-other-window)
         ([remap switch-to-buffer-other-frame] . consult-buffer-other-frame)
         ([remap bookmark-jump] . consult-bookmark)
         ([remap project-switch-to-buffer] . consult-project-buffer)
         ([remap yank-pop] . consult-yank-pop)
         :map isearch-mode-map
         ([remap isearch-edit-string] . consult-isearch-history)
         ("C-c l" . consult-line)
         ("C-c L" . consult-line-multi)
         :map minibuffer-local-map
         ([remap next-matching-history-element] . consult-history)
         ([remap previous-matching-history-element] . consult-history)))
#+END_SRC

*** orderless
[[https://github.com/oantolin/orderless]]

The built-in completion styles are fine but once you've used =orderless= you will find any other completion style clunky.
=orderless= implements a space separated regex completion.
As with everything in Emacs, this can be customed but the default works well.

#+BEGIN_SRC emacs-lisp
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles . (partial-completion))))))
#+END_SRC

** Load the customization file
Now at the end of the config we can load the customization file:

#+BEGIN_SRC emacs-lisp
(load custom-file)
#+END_SRC

* Managing keybindings
Emacs has a *lot* of keybindings.
You'll learn common operations (switching buffers and opening files) quickly.
For operations that you perform very infrequently, the =M-x= command menu works well as a command palette.
However I find there are a couple issues you'll face with this system.
This is by no means unique to emacs but it is more apparent in emacs since every possible operation is a function.
First a command palette only has value if you know roughly what you are searching for.
It isn't a great medium for discovery.
If you've never used an LSP client, you won't know to search for ~eglot-format-buffer~ when you want LSP-powered formatting.
However, it not feasible to bind every operation to a keybinding or to remember all those bindings.

The alternative is contextual keybindings.
Emacs already has this to some extent since keys are bound based on the active modes.
You can even add discoverability to this using something like [[https://github.com/justbur/emacs-which-key][which-key]].
This is a simple approach but has a few flaws.
For one, *all* available keybindings are displayed in an unorganized way.
This leads to cluttered view and it isn't easy to quickly find an operation you actually care about.
In addition you still need to use one of the keybindings available in the standard [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Conventions.html][keybinding conventions]] for every operation.

With a little more work, we can create contextual keybindings with better menu's and fewer keybindings.
There are two solutions: [[https://github.com/abo-abo/hydra][hydra]] and [[https://github.com/magit/transient][transient]].
Both are very similar and support all the features I find important.
=Hydra= uses colored letters to indicate how the letters will affect the hydra menu.
For example a =blue= key will exit the menu after running, a =red= key will keep it open, etc.
In addition, hydras gives you a lot of control over formatting (at least the parent hydra) so you can have keys layed out in a navigational pattern for example.
=Transient= is less flexible in terms of the display but supports infix commands natively.
This means it is great for creating interfaces to CLI commands where you might want to enable a flag while running a command (it was designed for the [[https://magit.vc/][magit]] git client after all).
I actually prefer =Transient= because it's less flexible layout means you can more easily add additional commands to a previously defined prefix.
Adding additional options to a hydra using a =hydra+= means the additional commands lie outside your prior defined formatting.
I've also faced a few bugs in hydra with certain commands that I don't experience in transient.
Unfortunately transient is a complex project and was not designed initially as a user-configuration tool.
The documentation is more dense.
